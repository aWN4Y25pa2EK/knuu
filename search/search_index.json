{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"knuu","text":""},{"location":"#description","title":"Description","text":"<p>The goal of knuu is to provide a framework for writing integration tests. The framework is written in Go and is designed to be used in Go projects. The idea is to provide a framework that uses the power of containers and Kubernetes without the test writer having to know the details of how to use them.</p> <p>We invite you to explore our codebase, contribute, and join us in developing a framework to help projects write integration tests.</p>"},{"location":"#features","title":"Features","text":"<p>Knuu is designed around <code>Instances</code>, which you can create, start, control, communicate with other Instances, stop, and destroy.</p> <p>Some of the features of knuu are:</p> <ul> <li>Initialize an Instance from a Container/Docker image</li> <li>Configure startup commands</li> <li>Configure Networking</li> <li>What ports to expose</li> <li>Disable networking to simulate network outages</li> <li>Configure Storage</li> <li>Execute Commands</li> <li>Configure HW resources</li> <li>Create a pool of Instances and control them as a group</li> <li>Allow AddFile after Commit via ConfigMap</li> <li>Implement a TTL value for Pod cleanup</li> <li>Add a timeout variable</li> <li>See this issue for more upcoming features: #91</li> </ul> <p>If you have feedback on the framework, want to report a bug, or suggest an improvement, please create an issue here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We warmly welcome and appreciate contributions.</p> <p>By participating in this project, you agree to abide by the CNCF Code of Conduct.</p> <p>See the Contributing Guide for more information.</p> <p>To ensure that your contribution is working as expected, please run knuu-example with your fork and branch.</p>"},{"location":"#licensing","title":"Licensing","text":"<p>Knuu is licensed under the Apache License 2.0.</p>"},{"location":"contributor/","title":"Overview","text":"<p>Thank you for taking the time to contribute to Knuu. All contributions are welcome and appreciated, even the tiniest fixes! :)</p> <p>If you are new to Knuu, please go through the README to familiarise yourself with the project.</p>"},{"location":"contributor/#choosing-an-issue-to-work-on","title":"Choosing an issue to work on","text":"<ul> <li> <p>Notice something missing in the repo? Open a new issue.</p> </li> <li> <p>Have a suggestion you want to implement? Open an issue, then create a Pull Request with your implementation.</p> </li> <li> <p>Want to resolve an issue in the repo, make a request to be assigned, and be sure to tag the issue in your PR!.</p> </li> </ul>"},{"location":"contributor/#contribution-workflow","title":"Contribution Workflow","text":"<p>To contribute to Knuu, follow these steps:</p> <ol> <li> <p>Fork the repository: Click on the 'Fork' button at the top right of this page. This will create a copy of the repository in your GitHub account.</p> </li> <li> <p>Clone the forked repository to your local machine. Open your terminal and run:</p> </li> </ol> <pre><code>git clone &lt;forked-repository-url&gt;\n</code></pre> <ol> <li>Create your working branch: In the project directory, create a new branch by running the following command in your terminal:</li> </ol> <pre><code>git checkout -b working-branch\n</code></pre> <p>Be sure to name your branch according to the changes you are making. For example: <code>add-missing-tests</code>.</p> <ol> <li> <p>Make your changes: Do not address multiple issues per PR.  For example, if you are adding a feature, it should not have bug fixes too. This is to enable the maintainers review your PR efficiently.</p> </li> <li> <p>Commit the changes to your branch: After making the desired changes to the repo, run the following commands to commit them:</p> </li> </ol> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"add an appropriate commit message\"\n</code></pre> <pre><code>git push origin &lt;working-branch&gt;\n</code></pre> <p>To ensure that your contribution is working as expected, please run <code>knuu-example</code> with your fork and working branch.</p> <ol> <li>Create a Pull Request: Go to your forked repository on GitHub, and be sure that you are in the branch you pushed the changes to. Click on the 'Compare &amp; pull request' button. This will open a new page where you can create your PR. Fill in the description field and click on 'Create pull request'. Be sure to name your PR with a semantic prefix. For example, if it is a fix, it should be specified with the <code>fix:</code> prefix.</li> </ol> <p>Congratulations! You have successfully made a Pull Request, and your changes will be reviewed by the maintainers.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>This section will guide you on how to set up and run knuu.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Docker: Knuu requires Docker to run</p> <p>You can install Docker by following the instructions here.</p> </li> <li> <p>Kubernetes cluster: Set up access to a Kubernetes cluster using a kubeconfig.</p> <p>In case you have no Kubernets cluster running yet, you can get more information here.</p> </li> <li> <p>'test' Namespace: Create a namespace called 'test' in your Kubernetes cluster.</p> <p>Note: The used namespace can be changed by setting the <code>KNUU_NAMESPACE</code> environment variable.</p> </li> </ol>"},{"location":"getting-started/#writing-tests","title":"Writing Tests","text":"<p>The documentation you can find  here.</p> <p>Simple example:</p> <ol> <li> <p>Add the following to your <code>go.mod</code> file:</p> <p><code>go require (     github.com/celestiaorg/knuu v0.8.2     github.com/stretchr/testify v1.8.4 )</code></p> </li> <li> <p>Run <code>go mod tidy</code> to download the dependencies.</p> </li> <li> <p>Create a file called <code>main_test.go</code> with the following content to initialize knuu:</p> </li> </ol> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"testing\"\n    \"time\"\n\n    \"github.com/celestiaorg/knuu/pkg/knuu\"\n)\n\nfunc TestMain(m *testing.M) {\n    err := knuu.Initialize()\n    if err != nil {\n        log.Fatalf(\"Error initializing knuu: %v:\", err)\n    }\n    exitVal := m.Run()\n    os.Exit(exitVal)\n}\n</code></pre> <ol> <li>Create a file called <code>example_test.go</code> with the following content:</li> </ol> <pre><code>package main\n\nimport (\n    \"os\"\n    \"testing\"\n\n    \"github.com/celestiaorg/knuu/pkg/knuu\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestBasic(t *testing.T) {\n    t.Parallel()\n    // Setup\n\n    instance, err := knuu.NewInstance(\"alpine\")\n    if err != nil {\n        t.Fatalf(\"Error creating instance '%v':\", err)\n    }\n    err = instance.SetImage(\"docker.io/alpine:latest\")\n    if err != nil {\n        t.Fatalf(\"Error setting image: %v\", err)\n    }\n    err = instance.SetCommand(\"sleep\", \"infinity\")\n    if err != nil {\n        t.Fatalf(\"Error setting command: %v\", err)\n    }\n    err = instance.Commit()\n    if err != nil {\n        t.Fatalf(\"Error committing instance: %v\", err)\n    }\n\n    t.Cleanup(func() {\n        // Cleanup\n        if os.Getenv(\"KNUU_SKIP_CLEANUP\") == \"true\" {\n            t.Log(\"Skipping cleanup\")\n            return\n        }\n\n        err = instance.Destroy()\n        if err != nil {\n            t.Fatalf(\"Error destroying instance: %v\", err)\n        }\n    })\n\n    // Test logic\n\n    err = instance.Start()\n    if err != nil {\n        t.Fatalf(\"Error starting instance: %v\", err)\n    }\n    err = instance.WaitInstanceIsRunning()\n    if err != nil {\n        t.Fatalf(\"Error waiting for instance to be running: %v\", err)\n    }\n    wget, err := instance.ExecuteCommand(\"echo\", \"Hello World!\")\n    if err != nil {\n        t.Fatalf(\"Error executing command '%v':\", err)\n    }\n\n    assert.Equal(t, wget, \"Hello World!\\n\")\n}\n</code></pre> <p>You can find more examples in the following repositories:</p> <ul> <li>celestiaorg/knuu-example</li> <li>celestiaorg/celestia-app</li> </ul>"},{"location":"getting-started/#running-tests","title":"Running Tests","text":"<p>You can use the built-in <code>go test</code> command to run the tests.</p> <p>To run all tests in the current directory, you can run:</p> <pre><code>go test -v ./...\n</code></pre>"}]}